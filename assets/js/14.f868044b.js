(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{422:function(t,n,a){"use strict";a.r(n);var e=a(0),r=Object(e.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"抽象语法树简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#抽象语法树简介"}},[t._v("#")]),t._v(" 抽象语法树简介")]),t._v(" "),n("p",[t._v("抽象语法树（Abstract Syntax Tree，AST）是源代码的抽象语法结构的树状表现形式。在编译器中，AST 用于表示源代码的抽象语法结构，它是源代码语法分析阶段的中间产物，也是许多编译器中的重要组成部分。\n抽象语法树本质就是一个树形结构的对象。")]),t._v(" "),n("p",[t._v("AST 可以通过对源代码进行语法分析，将源代码转换为一棵树形结构，每个节点代表代码中的一个语法单元，例如变量声明、函数调用、循环语句等，节点之间的关系代表语法单元之间的关系。\nAST 可以用于进行代码转换、代码优化、代码混淆、代码静态分析等操作。")]),t._v(" "),n("p",[t._v("常用各类转义、编译的插件中。比如最典型的 ES6 转换为 ES6 工具 、JSX 语法转换为 JavaScript 语法。即 babel 模块。\n代码语法的检查，比如代码规范工具 ESLint 模块。\n各类 JS/CSS/HTML 压缩工具。\n代码的格式化、高亮。\n代码错误提示。\n代码自动补全。")]),t._v(" "),n("p",[t._v("webpack底层使用的是AST抽象语法树")])])}),[],!1,null,null,null);n.default=r.exports}}]);