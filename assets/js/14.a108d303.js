(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{422:function(t,a,e){"use strict";e.r(a);var s=e(0),v=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("介绍")]),t._v(" "),a("p",[t._v("Vue学习笔记记录"),a("br")])]),t._v(" "),a("h2",{attrs:{id:"_1-什么是-vue-为什么选择使用-vue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是-vue-为什么选择使用-vue"}},[t._v("#")]),t._v(" 1. 什么是 Vue，为什么选择使用 Vue？")]),t._v(" "),a("p",[t._v("vue是一种流行的javaScript框架，用于构建交互式的web用户界面，他是一个渐进式的框架，允许使用时逐步应用其不同成分。\nvue易于学习，具有可读性强的模板语法和直观的api，同事提供了许多强大的功能和工具")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("1 易于学习和使用：Vue具有简洁的API和可读性强的模板语法，这使得它易于学习和使用，即使您没有深入的前端开发经验。")])]),t._v(" "),a("li",[a("p",[t._v("2 渐进式框架：Vue是一种渐进式框架，这意味着您可以逐步应用它的不同部分，而无需一次性全部引入。这使得Vue.js可以轻松地与其他库和框架集成。")])]),t._v(" "),a("li",[a("p",[t._v("3 组件化开发：Vue鼓励您使用组件化开发的方式来构建应用程序。这使得代码更易于维护和重用，并且使得团队合作更加高效。")])]),t._v(" "),a("li",[a("p",[t._v("4 响应式数据绑定：Vue的数据绑定机制使得数据和UI之间的同步非常容易。这使得开发者可以更快速地构建交互式的用户界面。")])]),t._v(" "),a("li",[a("p",[t._v("5 轻量级和高性能：Vue.js的文件大小很小，加载速度快，因此在构建大型应用程序时非常适合。同时，Vue也具有高性能和优秀的渲染速度。")])])]),t._v(" "),a("h2",{attrs:{id:"_2-vue的数据响应式原理是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-vue的数据响应式原理是什么"}},[t._v("#")]),t._v(" 2. vue的数据响应式原理是什么")]),t._v(" "),a("p",[t._v("vue的数据响应式原理是通过使用"),a("span",{staticStyle:{color:"red"}},[t._v("Object.defineProperty()")]),t._v("方法来实现。当一个对象传递给vue时，vue会遍历对象的所有属性并使用"),a("span",{staticStyle:{color:"red"}},[t._v("Object.defineProperty()")]),t._v("将它们转换为getter和setter方法。\n"),a("br"),t._v("\n在此过程中vue会为每个属性创建一个依赖追踪器(Dependency Tracker)。当一个属性被读取时，vue会将正在读取该属性代码添加到该属性的依赖追踪器中。当该属性被更新时，vue会通知依赖追踪器中的所有代码，以便它们可以更新其相应的数据。\n"),a("br"),t._v("\n这种数据响应式的机制使vue可以轻松的追踪数据的变化，并在数据发生改变时自动更新视图。当更新vue数据时，vue会自动将数据变更应用到其对应的视图中，而不需要手动编写DOM操作代码。")]),t._v(" "),a("h2",{attrs:{id:"_3-什么是组件化开发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-什么是组件化开发"}},[t._v("#")]),t._v(" 3. 什么是组件化开发")]),t._v(" "),a("p",[t._v("组件化开发是一种基于组件的软件开发方式，其中应用程序被分解为多个独立、可重用的组件。每个组件都具有自己的罗技、样式和模板，可以于其他组件组合使用以构建完整的应用程序。\n"),a("br"),t._v("\n在组件化开发中，每个组件都被视为一个独立的功能单元，类使用传统的面向对面对象编程中的对象。每个组件都可以包含自己的数据和罗技，并与其他组件进行通信以实现应用程序的功能。\n"),a("br"),t._v("\n组件开发具有以下几个优点：")]),t._v(" "),a("ul",[a("li",[t._v("1 可重用性：由于每个组件都是独立的，因此它们可以在应用程序的不同不分进行重复使用。这样可以大大的减少代码量，提高代码的可维护性和可重用性。")]),t._v(" "),a("li",[t._v("2 维护性：组件化开发使得应用程序的不同部分之间的关系更加透明清晰，可以更轻松的维护和更新应用程序。")]),t._v(" "),a("li",[t._v("3 开发效率：组件化开发可以加快开发的速度，因此可以通过重复使用组件来减少编写重复代码的时间和精力。")]),t._v(" "),a("li",[t._v("4 可测试性：由于每个组件都是独立的，因此可以更轻松的对组件进行单元测试和集成测试。\n"),a("br"),t._v("\nVue的组件化开发机制使得开发者可以更加快速地构建复杂的应用程序，并且使得代码更加清晰和易于维护")])]),t._v(" "),a("h2",{attrs:{id:"_4-什么是前端工程化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-什么是前端工程化"}},[t._v("#")]),t._v(" 4. 什么是前端工程化")]),t._v(" "),a("p",[t._v("前端工程化是一种通过利用工具和流程来提高前端开发效率、代码质量、可维护性和可扩展性的方法。它包括使用各种工具自动化任务、规范代码风格、优化资源管理、持续集成、自动化测试等方面的实践，使得剪短开发变得更高效和可靠。\n"),a("br"),t._v("\n前端工程化的主要目的是解决前端开发中的重复性工作和不必要的手动操作，以便开发者可以更专注于代码的实现和功能实现。")]),t._v(" "),a("ul",[a("li",[t._v("1 自动化构建：使用工具Webpack、Gulp、Grunt等来自动构建和编译代码，从而减少手动操作的数量。")]),t._v(" "),a("li",[t._v("2 规范代码风格： 使用工具如ESlint、Prettier等来强制执行代码规范，以保持代码的一致性和可读性。")]),t._v(" "),a("li",[t._v("3 模块化：将代码拆分为可重用的模块。以便于管理和维护。")]),t._v(" "),a("li",[t._v("4 组件化：将页面拆分为独立的模块，以便于重用和维护。")]),t._v(" "),a("li",[t._v("5 自动化测试：使用工具如Jest、Mocha等来自动化测试代码，以确保代码的正确性和可靠性。")]),t._v(" "),a("li",[t._v("6 持续集成：使用工具Rravis Ci、Jenkins等来进行持续集成，以确保代码在合并之前是稳定的可部署的。")])]),t._v(" "),a("h2",{attrs:{id:"_5-vue-的组件通信方式有哪些-它们之间有什么不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-vue-的组件通信方式有哪些-它们之间有什么不同"}},[t._v("#")]),t._v(" 5. Vue 的组件通信方式有哪些？它们之间有什么不同？")]),t._v(" "),a("ul",[a("li",[t._v("1 父子组件通信(props/$emit):父组件通过props向子组件传递数据，子组件通过$emit触发自定义事件向父组件传递数据。")]),t._v(" "),a("li",[t._v("2 子父组件通信($ref/$prent/$children):子组件通过$parent访问父组件实例，父组件通过$children访问子组件实例，子组件通过$ref访问父组件实例。")]),t._v(" "),a("li",[t._v("3 兄弟组件通信(事件总线/$attrs/$listenres):使用事件总线或创建一个独立的vue实例作为事件总线来实现兄弟组件之前的通信。\n另外，$attrs和$listenres属性可以用于将属性和事件传递给子组件")]),t._v(" "),a("li",[t._v("4 跨级组件通讯(provide/inject):使用provide和inject API来实现祖先和后台组件之间的通信，provide可以向后台组件注入数据，而inject可以在后台组件中访问注入的数据")])]),t._v(" "),a("h4",{attrs:{id:"区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[t._v("#")]),t._v(" 区别")]),t._v(" "),a("ul",[a("li",[t._v("1 父子组件通信方式主要用于父子组件之间的单向数据流，父组件通过props向子组件传递数据，子组件通过$emit触发自定义事件来向父组件传递数据。")]),t._v(" "),a("li",[t._v("2 子父组件通信方式主要用于子组件向父组件传递数据，子组件通过$parent访问父组件实例，父组件通过$children访问子组件实例，子组件通过$ref访问父组件的实例。")]),t._v(" "),a("li",[t._v("3 兄弟组件通信方式主要用于兄弟组件之间的通信，可以创建一个事件总线或者使用$attrs和$listeners属性将属性和事件传递给子组件。")]),t._v(" "),a("li",[t._v("4 跨级组件通信方式主要用于祖先和后代组件之间的通信，使用provide和inject API来实现。")])]),t._v(" "),a("h2",{attrs:{id:"_6-什么是生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-什么是生命周期"}},[t._v("#")]),t._v(" 6. 什么是生命周期")]),t._v(" "),a("p",[t._v("创建阶段（Creation）：从实例化组件开始，直到组件准备好被挂载到DOM中。")]),t._v(" "),a("p",[t._v("更新阶段（Updating）：当组件被挂载到DOM中后，任何导致组件重新渲染的变化都会触发更新阶段。")]),t._v(" "),a("p",[t._v("销毁阶段（Destruction）：当组件不再需要被使用，即将被销毁时，会进入销毁阶段。")]),t._v(" "),a("p",[t._v("每个阶段都有不同的钩子函数，也称为生命周期钩子函数，它们会在不同的阶段被自动调用。这些钩子函数允许开发者在不同的生命周期阶段添加自定义代码，以执行一些特定的操作。Vue的生命周期钩子函数包括：")]),t._v(" "),a("p",[t._v("beforeCreate：在实例化组件之前被调用。")]),t._v(" "),a("p",[t._v("created：在实例化组件之后被调用，但组件还未被挂载到DOM中。")]),t._v(" "),a("p",[t._v("beforeMount：在组件挂载到DOM之前被调用。")]),t._v(" "),a("p",[t._v("mounted：在组件挂载到DOM之后被调用。")]),t._v(" "),a("p",[t._v("beforeUpdate：在组件更新之前被调用。")]),t._v(" "),a("p",[t._v("updated：在组件更新之后被调用。")]),t._v(" "),a("p",[t._v("beforeDestroy：在组件销毁之前被调用。")]),t._v(" "),a("p",[t._v("destroyed：在组件销毁之后被调用。")]),t._v(" "),a("p",[t._v("在每个生命周期钩子函数中，开发者可以执行不同的操作，例如修改组件的数据、调用方法、更新DOM等。了解Vue的生命周期可以帮助开发者更好地掌握Vue的工作原理和开发流程，从而更好地进行Vue应用的开发。")]),t._v(" "),a("h2",{attrs:{id:"_7-vue-的生命周期钩子函数有哪些-它们的作用分别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-vue-的生命周期钩子函数有哪些-它们的作用分别是什么"}},[t._v("#")]),t._v(" 7. Vue 的生命周期钩子函数有哪些？它们的作用分别是什么？")]),t._v(" "),a("h2",{attrs:{id:"_8-说一下-vue-中-computed-属性和-watch-属性的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-说一下-vue-中-computed-属性和-watch-属性的区别"}},[t._v("#")]),t._v(" 8. 说一下 Vue 中 computed 属性和 watch 属性的区别？")]),t._v(" "),a("h2",{attrs:{id:"_9-vue-中如何实现路由懒加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-vue-中如何实现路由懒加载"}},[t._v("#")]),t._v(" 9. Vue 中如何实现路由懒加载？")]),t._v(" "),a("h2",{attrs:{id:"_10-如何进行axios请求的封装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-如何进行axios请求的封装"}},[t._v("#")]),t._v(" 10. 如何进行axios请求的封装？")]),t._v(" "),a("h2",{attrs:{id:"_11-vue-中的-v-if-和-v-show-指令有什么区别-应该在什么情况下使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-vue-中的-v-if-和-v-show-指令有什么区别-应该在什么情况下使用"}},[t._v("#")]),t._v(" 11. Vue 中的 v-if 和 v-show 指令有什么区别，应该在什么情况下使用？")]),t._v(" "),a("h2",{attrs:{id:"_12-如何进行单向数据流控制-避免子组件修改父组件的数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-如何进行单向数据流控制-避免子组件修改父组件的数据"}},[t._v("#")]),t._v(" 12. 如何进行单向数据流控制，避免子组件修改父组件的数据？")]),t._v(" "),a("h2",{attrs:{id:"_13-如何优化-vue-应用程序的性能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-如何优化-vue-应用程序的性能"}},[t._v("#")]),t._v(" 13. 如何优化 Vue 应用程序的性能？")]),t._v(" "),a("h2",{attrs:{id:"_14-分别说一下-vue-的两种指令-并举例说明它们的用法。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-分别说一下-vue-的两种指令-并举例说明它们的用法。"}},[t._v("#")]),t._v(" 14. 分别说一下 Vue 的两种指令，并举例说明它们的用法。")]),t._v(" "),a("h2",{attrs:{id:"_15-vue-router的原理是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-vue-router的原理是什么"}},[t._v("#")]),t._v(" 15. Vue-router的原理是什么？")]),t._v(" "),a("h2",{attrs:{id:"_16-vue-中如何监听数据变化并进行相应操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-vue-中如何监听数据变化并进行相应操作"}},[t._v("#")]),t._v(" 16. Vue 中如何监听数据变化并进行相应操作？")]),t._v(" "),a("h2",{attrs:{id:"_17-说一下-vue-中的-computed-和-methods-属性的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-说一下-vue-中的-computed-和-methods-属性的区别"}},[t._v("#")]),t._v(" 17. 说一下 Vue 中的 computed 和 methods 属性的区别？")]),t._v(" "),a("h2",{attrs:{id:"_18-vue-中如何实现多个根节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18-vue-中如何实现多个根节点"}},[t._v("#")]),t._v(" 18. Vue 中如何实现多个根节点？")]),t._v(" "),a("h2",{attrs:{id:"_19-如何在-vue-中使用过滤器对数据进行处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_19-如何在-vue-中使用过滤器对数据进行处理"}},[t._v("#")]),t._v(" 19. 如何在 Vue 中使用过滤器对数据进行处理？")]),t._v(" "),a("h2",{attrs:{id:"_20-vue3和vue2有哪些变化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20-vue3和vue2有哪些变化"}},[t._v("#")]),t._v(" 20. vue3和vue2有哪些变化？")]),t._v(" "),a("h2",{attrs:{id:"_21-vue-中的-props-属性有什么作用-如何使用它们来传递数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_21-vue-中的-props-属性有什么作用-如何使用它们来传递数据"}},[t._v("#")]),t._v(" 21. Vue 中的 props 属性有什么作用，如何使用它们来传递数据？")]),t._v(" "),a("h2",{attrs:{id:"_22-vue-中如何实现动态组件-并给它们传递参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_22-vue-中如何实现动态组件-并给它们传递参数"}},[t._v("#")]),t._v(" 22. Vue 中如何实现动态组件，并给它们传递参数？")]),t._v(" "),a("h2",{attrs:{id:"_23-vue-中如何使用插件-以及如何自己编写插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_23-vue-中如何使用插件-以及如何自己编写插件"}},[t._v("#")]),t._v(" 23. Vue 中如何使用插件，以及如何自己编写插件？")]),t._v(" "),a("h2",{attrs:{id:"_24-什么是虚拟dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_24-什么是虚拟dom"}},[t._v("#")]),t._v(" 24. 什么是虚拟DOM")]),t._v(" "),a("h2",{attrs:{id:"_25-说一下你对diff算法的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_25-说一下你对diff算法的理解"}},[t._v("#")]),t._v(" 25. 说一下你对diff算法的理解")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Demo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\t\n\n")])])])])}),[],!1,null,null,null);a.default=v.exports}}]);